"""
Django settings for orders project.

Generated by 'django-admin startproject' using Django 2.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('ENV_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('ENV_DEBUG')

ALLOWED_HOSTS = os.getenv('ENV_ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',  # админка
    'django.contrib.auth',  # аутентификация, создание пользователей
    'django.contrib.contenttypes',  # работа с типами контента
    'django.contrib.sessions',  # управление сессиями (корзина, авторизация)
    'django.contrib.messages',  # вывод сообщений об операциях от сервера к клиенту
    'django.contrib.staticfiles',  # обработка статических файлов (CSS, JS, изображения)
    'rest_framework',  # добавляет библиотеку Django REST framework
    'rest_framework.authtoken',  # добавляет аутентификацию потокену для Django REST framework
    'easy_thumbnails',  # улучшение ImageField в models
    'social_django',  # авторизация через соцсети
    'main',  # Наш проект
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'orders.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'orders.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': os.getenv('ENV_DB_ENGINE'),
        'NAME': os.getenv('ENV_DB_NAME'),
        'USER': os.getenv('ENV_DB_USER'),
        'PASSWORD': os.getenv('ENV_DB_PASSWORD'),
        'HOST': os.getenv('ENV_DB_HOST'),
        'PORT': os.getenv('ENV_DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'main.User'  # указываем Django использовать нашу модель User вместо стандартной

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',  # Проверка запросов в минуту от зарегистрированного пользователя
        'rest_framework.throttling.AnonRateThrottle',  # Проверка запросов в минуту от анонимного пользователя
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '20/minute',
        'anon': '10/minute'
    },
}

AUTHENTICATION_BACKENDS = (
    'social_core.backends.vk.VKOAuth2',           # бекенд авторизации через ВКонтакте
    'social_core.backends.github.GithubOAuth2',   # бекенд авторизации через GitHub
    'django.contrib.auth.backends.ModelBackend',  # бекенд классической аутентификации, обычный логин и пароль
)

SOCIAL_AUTH_VK_OAUTH2_KEY = os.getenv('VK_KEY')
SOCIAL_AUTH_VK_OAUTH2_SECRET = os.getenv('VK_SECRET')

SOCIAL_AUTH_GITHUB_KEY = os.getenv('GITHUB_KEY')
SOCIAL_AUTH_GITHUB_SECRET = os.getenv('GITHUB_SECRET')

SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['email']

LOGIN_URL = 'auth'
LOGIN_REDIRECT_URL = 'basket'

# Определяем способ отправки электронной почты
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # для отправки писем в консоль (для тестов)

# Определяем на какой адрес будут отправляться сообщения по умолчанию
EMAIL_HOST_USER = 'example@example.com'

# Определяем c какого адреса будут отправляться сообщения по умолчанию
DEFAULT_FROM_EMAIL = 'noreply@example.com'


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

DATETIME_FORMAT = "d E Y"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = '/static/'

# устанавливает URL для управления изображениями.
# Например для файла kofe.jpg: http://127.0.0.1:8000/media/kofe.jpg
MEDIA_URL = '/media/'

# устанавливает абсолютный путь к директории, где хранятся медиа файлы,
# без него все будут сохраняться в корневом каталоге
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
IMAGES_DIR = os.path.join(MEDIA_ROOT, 'images')

# определяет автоматическое присвоение первичного ключа в таблицах
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# подключение JSONB полей Postgres для авторизации чз соцсети
SOCIAL_AUTH_JSONFIELD_ENABLED = True

# celery
CELERY_BROKER_URL = os.getenv('ENV_REDIS_BROKER')
CELERY_RESULT_BACKEND = os.getenv('ENV_REDIS_BACK')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',  # Уровень логирования (DEBUG, INFO, WARNING, ERROR, CRITICAL)
            'class': 'logging.FileHandler',
            'filename': 'django.log',  # Путь к файлу логов
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Разрешаем создавать пользователей через social_auth
SOCIAL_AUTH_CREATE_USERS = True

SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. In some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    # 'social_core.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    'social_core.pipeline.social_auth.social_user',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    # 'social_core.pipeline.user.get_username',

    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social_core.pipeline.social_auth.associate_by_email',

    # Create a user account if we haven't found one yet.
    'social_core.pipeline.user.create_user',

    # Create the record that associates the social account with the user.
    'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social_core.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',
)

